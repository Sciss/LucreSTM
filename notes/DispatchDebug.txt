::::::::::::::

push phase:

Expr.Var<5 @ 0,1>.select(1)
|
+-ObserverKey(1) = region 1 view
|
+-Targets<16 @ 0,1>.select(1) -- ?? span1
| |
| +-Targets<20 @ 0,1>.select(1) -- min( span1_start#, span2_start# )
|   |
|   +-Targets<22 @ 0,1>.select(1) -- +( min( start1, start2 ), -100 )
|     |
|     +-Targets<26 @ 0,1>.select(1) -- span3
|       |
|       +-Expr.Var<37 @ 0,1>.select(1) -- region 3 span var
|         |
|         +-ObserverKey(5) = region 3 view
|         |
|         +-Region<32 @ 0,1>.select(2) -- region changed
|             |
|             +- SKIP 1 -> ObserverKey(6)
|             |
|             +-2 -> ObserverKey(6) = println
|
+-Targets<24 @ 0,1>.select(1) -- span1_stop#
  |
  +-Targets<26 @ 0,1>.select(1) -- span3
    // was already visited

:::::::::::::::

pull phase:

(1) Expr.Var<5 @ 0,1>.select(1) pullUpdate( path = Nil )

(2) Expr.Var<37 @ 0,1>.select(1) pullUpdate( path = List(
   Targets<26 @ 0,1>.select(1), 
   Targets<22 @ 0,1>.select(1), 
   Targets<20 @ 0,1>.select(1), 
   Targets<16 @ 0,1>.select(1), 
   Expr.Var<5 @ 0,1>.select(1)
))

now here is the problem: 
Targets<26 @ 0,1>.select(1)  is span3
- the propagation reached it through the span3.start.changed branch, and did not
  go through the span3.stop.changed branch (the last step in the push-phase, as
  <26> was already visited at its only slot)

the result in Tuple2.pullUpdate is, that _1ch is Some( before = now ), and
_2c.isSource reports false, yielding a _2ch of None.

::::::::::::::::

so this worked with the propagate( source ) approach, but doesn't work properly with pushUpdate( path ) because it wrongly suppresses vital paths.

so both paths must be followed:

 <..5...> = expr var
  |    |
 <16>  |
  |    |
 <20>  |
  |    |
 <22> <24>
  |    |
 <..26..> = span 3

such that _1c.isSource and _2c.isSource both report true

so what is the anatomy of Path[_] ?

::::::::::::::::

it should be a structure (see _Ideas.txt) that can store the cached updates as well

- a reactor selector is (Int, S#ID)
- Visited is MMap[ S#ID, Int ]
- Children is Seq[ (Int, Selector[ S ])]

the core push mechanism

      val cid     = reactor.id
      val bitset  = visited.getOrElse( cid, 0 )
      if( (bitset & inlet) == 0 ) {
         visited.+=( (cid, bitset | inlet) )
         val path1 = this :: path
         reactor.children.foreach { tup =>
            val inlet2 = tup._1
            if( inlet2 == inlet ) {
               val sel = tup._2
               sel.pushUpdate( source, update, parent, outlet, path1, visited, reactions )
            }
         }
      }

::::::::::::::::

- however, the whole problem would also disappear if TupleN Expr was mainting N input slots...
- still the update cache would be desirable?
- and also: _1c | _2c currently is an _addition_, it would fire twice!
- so what we want is actually _1c merge _1c
- like (_1.changed, _2.changed).map( ... )

- either the propagating reactor needs to establish whether the selector is 'accumulative' or
  'synthesizing'; or: the path for each observer is actually an inverted tree
- in the latter case, we can avoid having to create two events for Tuple2

- but... don't we already have a double filter, covering both inlets and outlets?
  - if( (bitset & inlet) == 0 ) --> refers to the _outlet_ 
- so, assuming we have two inlets in Span, 01(binary) for start, and 10(binary) for stop
  - span's pushUpdate would pass the bitset test twice
  - thus, any child of the span which is a reactor-selector would block in the second iteration
  - but, still, the observer's won't check the visited stuff and be invoked twice :-(

::::::::::::::::

the whole notion of inlet and outlet is still blurry.

it seems a selector is actually (inlet, outlet, node-id), where outlet is aka event-id !!

- but do we need this inlet for isSource? probably _not_, because if we have the inlet's input selector as
  path.head, we can safely perform checks against _1.changed.select and _2.changed.select

- so instead of complicating things more... path could be replaced by a Map?

- meaning that Path and Visited will be _merged_ into Map[ ReactorSelector, List[ ReactorSelector ]]
  where ReactorSelector.equals/hashCode = (event-id, node-id)

- and in pull, we would havea additionally a Map[ ReactorSelector, Option[ Any ]] representing the cached pull

::::::::::::::::

let's first make sure that this works with collection events...

- assume R2 = transform(R1)
- assume Coll = { R1, R2 }
- assume Obs <-- Coll
- assume R1 fires
- then Obs needs to receive two notifications
- the only way this can successfully work is, if pull(): Option[A] is changed to pull(): Seq[A]
- and I think this case isn't covered by other frameworks, such as EScala?

::::::::::::::::

but if Pull[ A ] = Seq[ A ], we run into problems with combining operators, e.g. _ + _
--> it would receive two seqs, one from operand A, one from operand B, and there wouldn't be a guarantee
that they have the same length, and there would be no way to tell which index corresponds with which index

; therefore, the better solution is to have collection events specifically emit Seqs, while Pull[ A ] remains Option[ A ]
; we could then still compose with collection events, if we use a map operator

::::::::::::::::

visited map for changing region1_stop-var

Targets<26 @ 0,1>.select(1) -> 
  Targets<24 @ 0,1>.select(1)

Targets<26 @ 0,1>.select(1) -> 
  Targets<22 @ 0,1>.select(1)

Targets<24 @ 0,1>.select(1) ->
  Expr.Var<5 @ 0,1>.select(1)

Region<32 @ 0,1>.select(2) ->
  Expr.Var<37 @ 0,1>.select(1)

Targets<22 @ 0,1>.select(1) ->
  Targets<20 @ 0,1>.select(1)

Targets<20 @ 0,1>.select(1) ->
  Targets<16 @ 0,1>.select(1)

Targets<16 @ 0,1>.select(1) ->
  Expr.Var<5 @ 0,1>.select(1)

Expr.Var<37 @ 0,1>.select(1) ->
  Targets<26 @ 0,1>.select(1)
  Targets<26 @ 0,1>.select(1)

all correct, but duplicate entry for Targets<26> indicates equals/hashCode missing

::::::::::::::::::::::::::::

Node<2 @ 0,1>.event[Collection]
Added(Node<2 @ 0,1>,0,Region<8 @ 1>)

rename:

Expr.Var<10 @ 1,2>
  Change(Region #1, e1ig#oRn)

  Targets<8 @ 1,2>.select(1) -- Region
    Node<2 @ 0,1,2>.select(2) -- RegionList

---> tx.read :  Targets<8 @ 1,2>.select(1)
 parent = <2 @ 0,1,2>
 id = <8 @ 1,2>

